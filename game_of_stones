#!/usr/bin/python3

from collections import deque
import sys
import math
import argparse
import re

# ========== Classes ==========

class ArgumentParser(argparse.ArgumentParser):
    """
    Custom ArgumentParser pour gérer plus finement certaines erreurs.
    """
    def _get_action_from_name(self, name):
        container = self._actions
        if name is None:
            return None
        for action in container:
            if '/'.join(action.option_strings) == name:
                return action
            elif action.metavar == name:
                return action
            elif action.dest == name:
                return action
        return None

    def error(self, message):
        exc = sys.exc_info()[1]
        if exc:
            exc.argument = self._get_action_from_name(exc.argument_name)
            raise exc
        super(ArgumentParser, self).error(message)

class Node:
    """
    Représente un personnage, ses amis et ceux qu'il complote contre.
    """
    def __init__(self, name: str):
        self.name = name
        self.friends = []
        self.conspiration = []
        self.depth = -1

    def add_friend(self, friend: 'Node'):
        """Ajoute une relation d'amitié bi-directionnelle."""
        if friend.name == self.name:
            raise ValueError("Cannot be friend with himself")
        if friend not in self.friends:
            self.friends.append(friend)
        if self not in friend.friends:
            friend.friends.append(self)

    def add_conspiration(self, conspiration: 'Node'):
        """Ajoute un complot (orienté)."""
        if conspiration.name == self.name:
            raise ValueError("Cannot be conspiration with himself")
        if conspiration not in self.conspiration:
            self.conspiration.append(conspiration)

class Graph:
    """
    Le graphe global.
    """
    def __init__(self):
        self.nodes = []

    def add_node(self, node: Node):
        if node not in self.nodes:
            self.nodes.append(node)
        else:
            raise ValueError("Node already exists")

    def find_node(self, name: str) -> Node:
        for node in self.nodes:
            if node.name == name:
                return node
        return None

# ========== Functions Utilitaires ==========

def is_valid_format(line: str):
    """
    Vérifie si la ligne correspond au format: "<pers> is friends with <pers>"
    Retourne [p1, p2] ou None.
    """
    pattern = r'^(\S.*) is friends with (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def is_valid_plot_format(line: str):
    """
    Vérifie si la ligne correspond au format: "<pers> is plotting against <pers>"
    Retourne [p1, p2] ou None.
    """
    pattern = r'^(\S.*) is plotting against (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def read_file(file: str) -> list:
    try:
        with open(file, 'r') as f:
            return f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"File {file} not found")

def get_list_pair_friend(friends_list: list):
    l = []
    for line in friends_list:
        line = line.strip()
        if not line:
            continue
        a = is_valid_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError(f"Invalid format in friendship file: {line}")
    return l

def get_list_pair_conspiracy(conspiracy_list: list):
    l = []
    for line in conspiracy_list:
        line = line.strip()
        if not line:
            continue
        a = is_valid_plot_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError(f"Invalid format in conspiracy file: {line}")
    return l

def find_or_create(graph: Graph, name: str) -> Node:
    node = graph.find_node(name)
    if node is None:
        node = Node(name)
        graph.add_node(node)
    return node

# ========== BFS Functions ==========

def bfs_distance(graph: Graph, start: Node, end: Node) -> int:
    for node in graph.nodes:
        node.depth = -1

    queue = deque()
    start.depth = 0
    queue.append(start)

    while queue:
        current = queue.popleft()
        if current == end:
            return current.depth
        for friend in current.friends:
            if friend.depth == -1:
                friend.depth = current.depth + 1
                queue.append(friend)

    return -1

def bfs_all_distances(graph: Graph, start: Node) -> dict:
    """
    Retourne un dict Node->distance pour la distance la plus courte
    (en amitiés) depuis start. Nœuds inaccessibles non inclus.
    """
    for node in graph.nodes:
        node.depth = -1

    dist = {}
    queue = deque()
    start.depth = 0
    dist[start] = 0
    queue.append(start)

    while queue:
        current = queue.popleft()
        for friend in current.friends:
            if friend.depth == -1:
                friend.depth = current.depth + 1
                dist[friend] = friend.depth
                queue.append(friend)

    return dist

# ========== Modes ==========

def links(fr: str, p1: str, p2: str, graph: Graph):
    friends_list = read_file(fr)
    if len(friends_list) == 0:
        raise ValueError("Empty friendship file")

    listPairs = get_list_pair_friend(friends_list)
    # Construction du graphe
    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    NodeP1 = graph.find_node(p1)
    NodeP2 = graph.find_node(p2)

    if NodeP1 is None or NodeP2 is None:
        print(f"Degree of separation between {p1} and {p2}: -1")
        return

    dist = bfs_distance(graph, NodeP1, NodeP2)
    print(f"Degree of separation between {p1} and {p2}: {dist}")

def plots(fr: str, cr: str, n: int):
    # 1) Construction du graphe à partir des amitiés
    friends_list = read_file(fr)
    if len(friends_list) == 0:
        raise ValueError("Empty friendship file")
    graph = Graph()

    listPairs = get_list_pair_friend(friends_list)
    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    # 2) Lecture CR (complots)
    conspiracies_list = read_file(cr)
    if len(conspiracies_list) == 0:
        raise ValueError("Empty conspiracies file")

    listConspiracies = get_list_pair_conspiracy(conspiracies_list)

    # === NEW/UPDATED ===
    # On stocke la structure plotsAgainst: { "A": set(["B", ...]) } si A complote contre B
    plotsAgainst = {}
    for pair in listConspiracies:
        A, B = pair
        # Vérifie si B existe dans FR (sinon => erreur)
        if graph.find_node(B) is None:
            print(f"An error occurred: {B} not found in friendships file", file=sys.stderr)
            sys.exit(84)
        if A not in plotsAgainst:
            plotsAgainst[A] = set()
        plotsAgainst[A].add(B)

    # 3) Afficher la liste alphabétique des noms
    sorted_names = sorted(node.name for node in graph.nodes)
    print("Names:")
    for name in sorted_names:
        print(name)
    print()

    # 4) Matrice des distances (≤ n => distance, > n => 0, inaccessible => -1)
    print("Relationships:")
    for name1 in sorted_names:
        src_node = graph.find_node(name1)
        dist_dict = bfs_all_distances(graph, src_node)
        row_parts = []
        for name2 in sorted_names:
            dst_node = graph.find_node(name2)
            if dst_node in dist_dict:
                d = dist_dict[dst_node]
                row_parts.append(str(d if d <= n else 0))
            else:
                row_parts.append(str(-1))
        print(" ".join(row_parts))
    print()

    # On cherche la reine pour calculer la distance BFS
    queenName = "Cersei Lannister"
    queenNode = graph.find_node(queenName)
    if queenNode is None:
        # S'il n'y a pas la reine dans FR, on ne peut pas appliquer la logique
        print("Conspiracies:")
        print("No queen in the graph => no resolution possible.")
        print()
        print("Result:")
        print("There is only one way out: treason!")
        return

    # Distances depuis la reine
    dist_from_queen = bfs_all_distances(graph, queenNode)

    # Identifie les ennemis directs (ceux qui complotent contre la reine)
    direct_enemies = []
    for conspirator, targets in plotsAgainst.items():
        if queenName in targets:
            direct_enemies.append(conspirator)

    # Enlever les doublons par sécurité
    direct_enemies = list(set(direct_enemies))
    direct_enemies.sort()  # tri alphabétique, au besoin

    # On va essayer de neutraliser chaque ennemi direct E
    used_conspiracies = []  # liste de (X, E) signifiant "X -> E"
    for E in direct_enemies:
        # Cherche tous ceux qui complotent contre E
        possible_conspirators = []
        for X, targetsX in plotsAgainst.items():
            if E in targetsX:
                possible_conspirators.append(X)

        if not possible_conspirators:
            # Personne ne complote contre E => impossible à neutraliser
            continue

        # Sépare ceux qui NE sont PAS ennemis directs (prioritaires) et ceux qui le sont
        non_enemies = [x for x in possible_conspirators if x not in direct_enemies]
        if non_enemies:
            # On trie par distance à la reine, puis ordre alphabétique
            best = sorted(
                non_enemies,
                key=lambda x: (dist_from_queen.get(graph.find_node(x), 9999), x)
            )[0]
        else:
            # On prend parmi les ennemis directs
            best = sorted(
                possible_conspirators,
                key=lambda x: (dist_from_queen.get(graph.find_node(x), 9999), x)
            )[0]

        used_conspiracies.append((best, E))

    # Vérifie si on a neutralisé tous les ennemis
    neutralized_enemies = { e for (_, e) in used_conspiracies }
    remaining = set(direct_enemies) - neutralized_enemies

    print("Conspiracies:")
    if remaining:
        # Au moins un ennemi direct non neutralisé => on ne peut pas sauver la couronne
        # On peut afficher un diagnostic sommaire
        for (x, e) in sorted(used_conspiracies, key=lambda t: (t[0], t[1])):
            print(f"{x} -> {e}")
        print(f"No conspiracy possible against: {', '.join(sorted(remaining))}")
        print()
        print("Result:")
        print("There is only one way out: treason!")
        return
    else:
        # Tous neutralisés => on affiche la liste des conspirations dans l'ordre voulu
        # Tri par nom du conspirateur (x)
        used_conspiracies.sort(key=lambda t: (t[0], t[1]))
        for (x, e) in used_conspiracies:
            print(f"{x} -> {e}")
        print()
        print("Result:")
        print("The stone is safe!")
    # === /NEW

def main() -> int:
    if len(sys.argv) != 5:
        raise ValueError("Invalid number of arguments")

    parser = ArgumentParser(
        usage='./game_of_stones [--links FR P1 P2 | --plots FR CR n]',
        description='Game of Stones command line tool'
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--links', nargs=3, metavar=('FR', 'P1', 'P2'),
                       help='FR: file containing friendship relations, P1: person one, P2: person two')
    group.add_argument('--plots', nargs=3, metavar=('FR', 'CR', 'n'),
                       help='FR: file with friendship relations, CR: file with conspiracies intentions, n: max friendship path length')
    graph = Graph()

    args = parser.parse_args()

    if args.links:
        fr, p1, p2 = args.links
        links(fr, p1, p2, graph)

    elif args.plots:
        fr, cr, n = args.plots
        if not n.isdigit() or int(n) <= 0:
            raise ValueError("n must be a positive number")
        plots(fr, cr, int(n))

    return 0

if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(84)
