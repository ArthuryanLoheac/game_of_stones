#!/usr/bin/python3

from collections import deque
import sys
import math
import argparse
import re

# ========== Classes ==========

class ArgumentParser(argparse.ArgumentParser):    
    def _get_action_from_name(self, name):
        container = self._actions
        if name is None:
            return None
        for action in container:
            if '/'.join(action.option_strings) == name:
                return action
            elif action.metavar == name:
                return action
            elif action.dest == name:
                return action

    def error(self, message):
        exc = sys.exc_info()[1]
        if exc:
            exc.argument = self._get_action_from_name(exc.argument_name)
            raise exc
        super(ArgumentParser, self).error(message)

class Node:
    name = ""
    friends = []
    conspiration = []
    depth = -1

    def __init__(self, name: str):
        self.name = name
        self.friends = []
        self.conspiration = []

    def add_friend(self, friend: 'Node'):
        if friend.name == self.name:
            raise ValueError("Cannot be friend with himself")
        if friend not in self.friends:
            self.friends.append(friend)
        if self not in friend.friends:
            friend.friends.append(self)

    def add_conspiration(self, conspiration: 'Node'):
        if conspiration.name == self.name:
            raise ValueError("Cannot be conspiration with himself")
        if conspiration not in self.conspiration:
            self.conspiration.append(conspiration)

class Graph:
    nodes = []
    QueenNode = None

    def __init__(self):
        self.nodes = []

    def add_node(self, node: Node):
        if node not in self.nodes:
            self.nodes.append(node)
        else:
            raise ValueError("Node already exists")

    def add_queen(self, node: Node):
        if self.QueenNode is not None:
            raise ValueError("Queen already exists")
        self.QueenNode = node
        self.add_node(node)

    def find_node(self, name: str) -> Node:
        for node in self.nodes:
            if node.name == name:
                return node
        return None

    def compute_dist(self, start : Node, end : Node, depth = 0) -> int:
        if start == end and depth == 0:
            return depth
        if start == end:
            return depth - 1
        min_dist = math.inf
        for friend in start.friends:
            if friend.depth == -1:
                friend.depth = depth
                dist = self.compute_dist(friend, end, depth + 1)
                min_dist = min(min_dist, dist)
        return min_dist

# ========== Functions ==========

def is_valid_format(line: str):
    pattern = r'^(\S.*) is friends with (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def read_file(file: str) -> list:
    try:
        with open(file, 'r') as f:
            return f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"File {file} not found")

def get_list_pair_friend(friends_list: list):
    l = []
    for line in friends_list:
        a = is_valid_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError("Invalid format in file")
    return l

def find_or_create(graph: Graph, name: str) -> Node:
    node = graph.find_node(name)
    if node is None:
        node = Node(name)
        graph.add_node(node)
    return node

def links(fr: str, p1: str, p2: str, graph: Graph):
    friends_list = read_file(fr)
    listPairs = get_list_pair_friend(friends_list)
    # Construction du graphe à partir du FR
    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    NodeP1 = graph.find_node(p1)
    NodeP2 = graph.find_node(p2)
    if NodeP1 is None or NodeP2 is None:
        print(f"Degree of separation between {p1} and {p2}: -1")
        return

    dist = graph.compute_dist(NodeP1, NodeP2)
    if dist == math.inf:
        dist = -1
    print(f"Degree of separation between {p1} and {p2}: {dist}")

def plots(fr: str, cr: str, n: int):
    # Lecture du fichier FR et construction du graphe
    friends_list = read_file(fr)
    listPairs = get_list_pair_friend(friends_list)
    graph = Graph()

    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    conspiracies_list = read_file(cr)

    sorted_names = sorted(node.name for node in graph.nodes)
    print("Names:")
    for name in sorted_names:
        print(name)
    print()

    # générer la matrice de distances
    # gérer les conspirations

    # print(f"Plots mode: FR={fr}, CR={cr}, n={n}")
    # affichage de la matrice
    # affichage manipulations de complot

# ========== Main ==========

def main() -> int:
    # Initialize the parser with custom usage
    parser = ArgumentParser(
        usage='./game_of_stones [--links FR P1 P2 | --plots FR CR n]',
        description='Game of Stones command line tool'
    )
    # Create a mutually exclusive group
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--links', nargs=3, metavar=('FR', 'P1', 'P2'),
                       help='FR: file containing friendship relations, P1: person one, P2: person two')
    group.add_argument('--plots', nargs=3, metavar=('FR', 'CR', 'n'),
                       help='FR: file with friendship relations, CR: file with conspiracies intentions, n: maximum length of friendship paths')
    graph = Graph()
    
    try:
        args = parser.parse_args()
    except argparse.ArgumentError as e:
        raise e
    # Process arguments based on the used option
    if args.links:
        fr, p1, p2 = args.links
        links(fr, p1, p2, graph)

    if args.plots:
        fr, cr, n = args.plots
        if not n.isdigit() or int(n) <= 0:
            raise ValueError("n must be a positive number")
        plots(fr, cr, int(n))

    return 0

if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(84)
