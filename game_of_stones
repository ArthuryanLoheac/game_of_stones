#!/usr/bin/python3

from collections import deque
import sys
import argparse
import re

# ========== Classes ==========

class ArgumentParser(argparse.ArgumentParser):
    """
    Custom ArgumentParser pour gérer plus finement certaines erreurs.
    """
    def _get_action_from_name(self, name):
        container = self._actions
        if name is None:
            return None
        for action in container:
            if '/'.join(action.option_strings) == name:
                return action
            elif action.metavar == name:
                return action
            elif action.dest == name:
                return action
        return None

    def error(self, message):
        exc = sys.exc_info()[1]
        if exc:
            exc.argument = self._get_action_from_name(exc.argument_name)
            raise exc
        super(ArgumentParser, self).error(message)

class Node:
    """
    Représente un personnage, ses amis et ceux contre lesquels il complote.
    """
    def __init__(self, name: str):
        self.name = name
        self.friends = []
        self.conspiration = []  # Liste des Node contre lesquels ce personnage complote
        self.depth = -1

    def add_friend(self, friend: 'Node'):
        """Ajoute une relation d'amitié bi-directionnelle."""
        if friend.name == self.name:
            raise ValueError("Cannot be friend with himself")
        if friend not in self.friends:
            self.friends.append(friend)
        if self not in friend.friends:
            friend.friends.append(self)

    def add_conspiration(self, target: 'Node'):
        """Ajoute un complot orienté : ce personnage complote contre target."""
        if target.name == self.name:
            raise ValueError("Cannot conspire against himself")
        if target not in self.conspiration:
            self.conspiration.append(target)

class Graph:
    """
    Le graphe global.
    """
    def __init__(self):
        self.nodes = []

    def add_node(self, node: Node):
        if node not in self.nodes:
            self.nodes.append(node)
        else:
            raise ValueError("Node already exists")

    def find_node(self, name: str) -> Node:
        for node in self.nodes:
            if node.name == name:
                return node
        return None

# ========== Fonctions Utilitaires ==========

def is_valid_format(line: str):
    """
    Vérifie si la ligne correspond au format: "<pers> is friends with <pers>"
    Retourne [p1, p2] ou None.
    """
    pattern = r'^(\S.*) is friends with (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def is_valid_plot_format(line: str):
    """
    Vérifie si la ligne correspond au format: "<pers> is plotting against <pers>"
    Retourne [p1, p2] ou None.
    """
    pattern = r'^(\S.*) is plotting against (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def read_file(file: str) -> list:
    try:
        with open(file, 'r') as f:
            return f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"File {file} not found")

def get_list_pair_friend(friends_list: list):
    l = []
    for line in friends_list:
        line = line.strip()
        if not line:
            continue
        a = is_valid_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError(f"Invalid format in friendship file: {line}")
    return l

def get_list_pair_conspiracy(conspiracy_list: list):
    l = []
    for line in conspiracy_list:
        line = line.strip()
        if not line:
            continue
        a = is_valid_plot_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError(f"Invalid format in conspiracy file: {line}")
    return l

def find_or_create(graph: Graph, name: str) -> Node:
    node = graph.find_node(name)
    if node is None:
        node = Node(name)
        graph.add_node(node)
    return node

# ========== BFS Functions ==========

def bfs_distance(graph: Graph, start: Node, end: Node) -> int:
    for node in graph.nodes:
        node.depth = -1

    queue = deque()
    start.depth = 0
    queue.append(start)

    while queue:
        current = queue.popleft()
        if current == end:
            return current.depth
        for friend in current.friends:
            if friend.depth == -1:
                friend.depth = current.depth + 1
                queue.append(friend)

    return -1

def bfs_all_distances(graph: Graph, start: Node) -> dict:
    """
    Retourne un dict Node->distance pour la distance la plus courte
    (en amitiés) depuis start. Nœuds inaccessibles non inclus.
    """
    for node in graph.nodes:
        node.depth = -1

    dist = {}
    queue = deque()
    start.depth = 0
    dist[start] = 0
    queue.append(start)

    while queue:
        current = queue.popleft()
        for friend in current.friends:
            if friend.depth == -1:
                friend.depth = current.depth + 1
                dist[friend] = friend.depth
                queue.append(friend)

    return dist

# ========== Recherche de chaîne de complot ==========

def find_conspiracy_chain_for_enemy(graph: Graph, enemy: Node, n: int, dist_from_queen: dict, queenNode: Node) -> list:
    """
    Cherche une chaîne de complot depuis un ami proche de la reine (distance <= n)
    jusqu'à l'ennemi direct, sans répéter un personnage dans la même chaîne.
    Une chaîne est une séquence [S, ..., enemy] où :
      - S est un ami proche de la reine (distance <= n) et S != enemy,
      - Pour chaque lien, X complote contre Y (Y ∈ X.conspiration),
      - Aucun personnage ne figure deux fois dans la chaîne.
    Parmi toutes les chaînes possibles, la priorité de sélection est la suivante :
      1. Privilégier un allié S qui **ne complote pas directement contre la Reine**
      2. Parmi eux, choisir celui le plus proche de la Reine (distance minimale)
      3. En cas d'égalité, le premier par ordre alphabétique.
    En cas d'égalité sur ces critères, la chaîne la plus courte est sélectionnée, puis
    en cas d'égalité sur la longueur, la première en ordre lexicographique.
    Retourne la chaîne sous forme de liste de noms ou None si aucune chaîne n'existe.
    """
    candidate_chains = []
    # On parcourt tous les nœuds close friends (distance <= n) de la reine qui ne sont pas l'ennemi
    for node in graph.nodes:
        if node == enemy:
            continue
        if node not in dist_from_queen or dist_from_queen[node] > n:
            continue
        # Recherche en largeur (BFS) dans le graphe des complots depuis ce node
        queue = deque()
        queue.append((node, [node]))
        while queue:
            current, path = queue.popleft()
            for neighbor in current.conspiration:
                if neighbor in path:  # éviter les cycles dans la même chaîne
                    continue
                new_path = path + [neighbor]
                if neighbor == enemy:
                    candidate_chains.append(new_path)
                else:
                    queue.append((neighbor, new_path))
    if not candidate_chains:
        return None

    def chain_priority(chain):
        S = chain[0]
        # is_direct vaut 1 si S complote directement contre la Reine, 0 sinon
        is_direct = 1 if queenNode in S.conspiration else 0
        return (len(chain), is_direct, dist_from_queen.get(S, 9999), S.name, [node.name for node in chain])
    candidate_chains.sort(key=chain_priority)
    best_chain = candidate_chains[0]
    return [node.name for node in best_chain]

# ========== Modes ==========

def links(fr: str, p1: str, p2: str, graph: Graph):
    friends_list = read_file(fr)
    if len(friends_list) == 0:
        raise ValueError("Empty friendship file")

    listPairs = get_list_pair_friend(friends_list)
    # Construction du graphe
    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    NodeP1 = graph.find_node(p1)
    NodeP2 = graph.find_node(p2)

    if NodeP1 is None or NodeP2 is None:
        print(f"Degree of separation between {p1} and {p2}: -1")
        return

    dist = bfs_distance(graph, NodeP1, NodeP2)
    print(f"Degree of separation between {p1} and {p2}: {dist}")

def plots(fr: str, cr: str, n: int):
    # 1) Construction du graphe à partir des amitiés
    friends_list = read_file(fr)
    if len(friends_list) == 0:
        raise ValueError("Empty friendship file")
    graph = Graph()

    listPairs = get_list_pair_friend(friends_list)
    for pair in listPairs:
        n1 = find_or_create(graph, pair[0])
        n2 = find_or_create(graph, pair[1])
        n1.add_friend(n2)

    # 2) Lecture du fichier de complots (CR)
    conspiracies_list = read_file(cr)
    if len(conspiracies_list) == 0:
        raise ValueError("Empty conspiracies file")

    listConspiracies = get_list_pair_conspiracy(conspiracies_list)

    # Intégration relationnelle des complots dans les nœuds
    for pair in listConspiracies:
        A, B = pair
        nodeA = graph.find_node(A)
        nodeB = graph.find_node(B)
        if nodeA is None or nodeB is None:
            print(f"An error occurred: {A if nodeA is None else B} not found in friendships file", file=sys.stderr)
            sys.exit(84)
        nodeA.add_conspiration(nodeB)

    # 3) Afficher la liste alphabétique des noms
    sorted_names = sorted(node.name for node in graph.nodes)
    print("Names:")
    for name in sorted_names:
        print(name)
    print()

    # 4) Matrice des distances (≤ n => distance, > n => 0, inaccessible => -1)
    print("Relationships:")
    for name1 in sorted_names:
        src_node = graph.find_node(name1)
        dist_dict = bfs_all_distances(graph, src_node)
        row_parts = []
        for name2 in sorted_names:
            dst_node = graph.find_node(name2)
            if dst_node in dist_dict:
                d = dist_dict[dst_node]
                row_parts.append(str(d if d <= n else 0))
            else:
                row_parts.append(str(-1))
        print(" ".join(row_parts))
    print()

    # 5) Recherche de chaînes de complots
    queenName = "Cersei Lannister"
    queenNode = graph.find_node(queenName)
    if queenNode is None:
        print("Conspiracies:")
        print("No queen in the graph => no resolution possible.")
        print()
        print("Result:")
        print("There is only one way out: treason!")
        return

    # Calcul des distances depuis la reine (pour déterminer les close friends)
    dist_from_queen = bfs_all_distances(graph, queenNode)

    # Identification des ennemis directs : ceux qui complotent directement contre la reine
    direct_enemies = []
    for node in graph.nodes:
        if queenNode in node.conspiration:
            direct_enemies.append(node)
    # Tri alphabétique des ennemis directs
    direct_enemies = sorted(set(direct_enemies), key=lambda node: node.name)

    # Pour chaque ennemi direct, chercher une chaîne candidate
    candidate_chains = {}   # mapping enemy.name -> candidate chain (liste de noms)
    for enemy in direct_enemies:
        chain = find_conspiracy_chain_for_enemy(graph, enemy, n, dist_from_queen, queenNode)
        if chain is not None:
            candidate_chains[enemy.name] = chain

    # Sélection disjointe des chaînes :
    # On ne peut pas utiliser le même personnage (hors cible) dans deux chaînes différentes.
    selected = {}  # enemy name -> chain
    used_nodes = set()  # ensemble des personnages déjà affectés (hors cible)
    # On crée une liste de candidats avec leur priorité (même critère que dans find_conspiracy_chain_for_enemy)
    def chain_priority(chain):
        S = graph.find_node(chain[0])
        is_direct = 1 if queenNode in S.conspiration else 0
        return (len(chain), is_direct, dist_from_queen.get(S, 9999), S.name, chain)
    # Liste de tuples (enemy, chain, priority)
    candidates = []
    for enemy_name, chain in candidate_chains.items():
        candidates.append((enemy_name, chain, chain_priority(chain)))
    # On trie par priorité croissante
    candidates.sort(key=lambda tup: tup[2])
    assigned_enemies = set()
    for enemy_name, chain, prio in candidates:
        # Vérifier que les personnages de la chaîne (sauf la cible enemy) ne sont pas déjà utilisés
        chain_nodes = set(chain[:-1])
        if used_nodes & chain_nodes:
            continue  # conflit, on ne peut pas affecter ce candidat
        # Sinon, on affecte la chaîne pour cet ennemi
        selected[enemy_name] = chain
        used_nodes |= chain_nodes
        assigned_enemies.add(enemy_name)
    # Pour les ennemis directs sans chaîne assignée, on les ajoute dans no_chain
    no_chain = set()
    for enemy in direct_enemies:
        if enemy.name not in assigned_enemies:
            no_chain.add(enemy.name)

    # Constitution de la liste finale des chaînes assignées (triées par longueur, puis ordre lexicographique)
    final_chains = list(selected.values())
    final_chains.sort(key=lambda chain: (len(chain), chain))
    
    print("Conspiracies:")
    for chain in final_chains:
        print(" -> ".join(chain))
    for enemy in sorted(no_chain):
        print(f"No conspiracy possible against {enemy}")
    print()

    if len(assigned_enemies) != len(direct_enemies):
        print("Result:")
        print("There is only one way out: treason!")
    else:
        print("Result:")
        print("The stone is safe!")

def main() -> int:
    if len(sys.argv) != 5:
        raise ValueError("Invalid number of arguments")

    parser = ArgumentParser(
        usage='./game_of_stones [--links FR P1 P2 | --plots FR CR n]',
        description='Game of Stones command line tool'
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--links', nargs=3, metavar=('FR', 'P1', 'P2'),
                       help='FR: file containing friendship relations, P1: person one, P2: person two')
    group.add_argument('--plots', nargs=3, metavar=('FR', 'CR', 'n'),
                       help='FR: file with friendship relations, CR: file with conspiracies intentions, n: max friendship path length')
    graph = Graph()

    args = parser.parse_args()

    if args.links:
        fr, p1, p2 = args.links
        links(fr, p1, p2, graph)

    elif args.plots:
        fr, cr, n = args.plots
        if not n.isdigit() or int(n) <= 0:
            raise ValueError("n must be a positive number")
        plots(fr, cr, int(n))

    return 0

if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(84)
