#!/usr/bin/python3

from collections import deque
import sys
import math
import argparse
import re

# ========== Classes ==========

class Node:
    name = ""
    friends = []
    conspiration = []
    depth = -1

    def __init__(self, name: str):
        self.name = name
        self.friends = []
        self.conspiration = []

    def add_friend(self, friend: 'Node'):
        if friend.name == self.name:
            raise ValueError("Cannot be friend with himself")
        if friend not in self.friends:
            self.friends.append(friend)
        if self not in friend.friends:
            friend.friends.append(self)

    def add_conspiration(self, conspiration: 'Node'):
        if conspiration.name == self.name:
            raise ValueError("Cannot be conspiration with himself")
        if conspiration not in self.conspiration:
            self.conspiration.append(conspiration)

class Graph:
    nodes = []
    QueenNode = None

    def __init__(self):
        self.nodes = []

    def add_node(self, node: Node):
        if node not in self.nodes:
            self.nodes.append(node)
        else:
            raise ValueError("Node already exists")

    def add_queen(self, node: Node):
        if self.QueenNode is not None:
            raise ValueError("Queen already exists")
        self.QueenNode = node
        self.add_node(node)

    def find_node(self, name: str) -> Node:
        for node in self.nodes:
            if node.name == name:
                return node
        return None

    def compute_dist(self, start : Node, end : Node, depth = 0) -> int:
        """
        Parcours récursif (DFS) non optimal.
        On l'utilise dans le mode --links.
        """
        if start == end and depth == 0:
            return depth
        if start == end:
            return depth - 1
        min_dist = math.inf
        for friend in start.friends:
            if friend.depth == -1:
                friend.depth = depth
                dist = self.compute_dist(friend, end, depth + 1)
                min_dist = min(min_dist, dist)
        return min_dist

# ========== Functions ==========

def is_valid_format(line: str):
    pattern = r'^(\S.*) is friends with (\S.*)$'
    match = re.match(pattern, line)
    if match:
        return [match.group(1).strip(), match.group(2).strip()]
    return None

def read_file(file: str) -> list:
    try:
        with open(file, 'r') as f:
            return f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"File {file} not found")

def getListPairFriend(friends_list: list):
    l = []
    for line in friends_list:
        # on nettoie la ligne avant le match
        line = line.strip()
        if not line:
            continue
        a = is_valid_format(line)
        if a is not None:
            l.append(a)
        else:
            raise ValueError(f"Invalid format in file: {line}")
    return l

def findOrCreate(graph: Graph, name: str) -> Node:
    node = graph.find_node(name)
    if node is None:
        node = Node(name)
        graph.add_node(node)
    return node

def bfs_all_distances(graph: Graph, start: Node) -> dict:
    """
    Calcule la distance minimale entre 'start' et tous les autres nœuds du graphe
    via BFS. Renvoie un dictionnaire : { Node: distance_en_entier }.
    """
    from collections import deque
    queue = deque()
    dist = {}

    # on remet depth = -1 pour tout le monde avant la BFS
    for node in graph.nodes:
        node.depth = -1

    # point de départ
    start.depth = 0
    dist[start] = 0
    queue.append(start)

    while queue:
        current = queue.popleft()
        for friend in current.friends:
            if friend.depth == -1:
                friend.depth = current.depth + 1
                dist[friend] = friend.depth
                queue.append(friend)
    return dist

def links(fr: str, p1: str, p2: str, graph: Graph):
    friends_list = read_file(fr)
    listPairs = getListPairFriend(friends_list)
    # Construction du graphe à partir du FR
    for pair in listPairs:
        n1 = findOrCreate(graph, pair[0])
        n2 = findOrCreate(graph, pair[1])
        n1.add_friend(n2)

    NodeP1 = graph.find_node(p1)
    NodeP2 = graph.find_node(p2)
    if NodeP1 is None or NodeP2 is None:
        print(f"Degree of separation between {p1} and {p2}: -1")
        return

    # Remise à zéro des depth
    for node in graph.nodes:
        node.depth = -1

    dist = graph.compute_dist(NodeP1, NodeP2)
    if dist == math.inf:
        dist = -1
    print(f"Degree of separation between {p1} and {p2}: {dist}")

def plots(fr: str, cr: str, n: int):
    """
    Mode plots:
    1) Lit le fichier FR et construit le graphe des amitiés
    2) Lit le fichier CR (non encore traité ici)
    3) Affiche la liste des noms et la matrice de distances <= n
    4) Gère ensuite les complots (à implémenter / compléter)
    """
    # 1) Lecture du fichier FR et construction du graphe
    friends_list = read_file(fr)
    listPairs = getListPairFriend(friends_list)
    graph = Graph()

    for pair in listPairs:
        node1 = findOrCreate(graph, pair[0])
        node2 = findOrCreate(graph, pair[1])
        node1.add_friend(node2)

    # 2) Lecture du fichier CR (complots) - à utiliser plus tard
    conspiracies_list = read_file(cr)

    # 3) Affiche la liste alphabétique des noms
    sorted_names = sorted(node.name for node in graph.nodes)
    print("Names:")
    for name in sorted_names:
        print(name)

    # 4) Générer et afficher la matrice de distances
    print("Relationships:")
    # Pour chaque node (dans l'ordre alphabétique), on fait un BFS
    for name_src in sorted_names:
        src_node = graph.find_node(name_src)
        dist_dict = bfs_all_distances(graph, src_node)
        row_values = []
        for name_dst in sorted_names:
            dst_node = graph.find_node(name_dst)
            d = dist_dict.get(dst_node, math.inf)
            # on stocke d si d <= n, sinon 0 (comme dans les exemples)
            row_values.append(str(d if d <= n else 0))
        # on affiche une ligne par source
        print(" ".join(row_values))

    # Ici vous pourrez gérer l’analyse des complots (informations issues de `conspiracies_list`).
    # Exemples possibles :
    # - Identifier la reine (Cersei Lannister) si besoin
    # - Calculer les ennemis directs
    # - Trouver les chaînes de complot
    # - Affichage final: "The stone is safe!" ou "There is only one way out: treason!"
    #
    # Pour l'instant, on se contente de montrer la génération de la matrice.

    # Ex. d'un résumé minimal des conspirations (placeholder):
    print("Conspiracies:")
    for line in conspiracies_list:
        line = line.strip()
        if not line:
            continue
        print(line)  # juste un affichage brut pour l'instant

    # Résultat final (placeholder)
    print("Result:")
    print("The stone is safe!")  # ou "There is only one way out: treason!"

# ========== Main ==========

def main() -> int:
    # Initialize the parser with custom usage
    parser = argparse.ArgumentParser(
        usage='./game_of_stones [--links FR P1 P2 | --plots FR CR n]',
        description='Game of Stones command line tool'
    )
    # Create a mutually exclusive group
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--links', nargs=3, metavar=('FR', 'P1', 'P2'),
                       help='FR: file containing friendship relations, P1: person one, P2: person two')
    group.add_argument('--plots', nargs=3, metavar=('FR', 'CR', 'n'),
                       help='FR: file with friendship relations, CR: file with conspiracies intentions, n: maximum length of friendship paths')
    graph = Graph()

    args = parser.parse_args()
    # Process arguments based on the used option
    if args.links:
        fr, p1, p2 = args.links
        links(fr, p1, p2, graph)

    if args.plots:
        fr, cr, n = args.plots
        if not n.isdigit() or int(n) <= 0:
            raise ValueError("n must be a positive number")
        plots(fr, cr, int(n))

    return 0

if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(84)
