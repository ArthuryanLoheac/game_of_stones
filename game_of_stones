#!/usr/bin/python3

import sys
import math
import argparse

class Node:
    name = ""
    friends = []
    conspiration = []

    def __init__(self, name: str):
        self.name = name
        self.friends = []
        self.conspiration = []

    def add_friend(self, friend: str):
        if (friend.name == self.name):
            raise ValueError("Cannot be friend with himself")
        if (friend not in self.friends):
            self.friends.append(friend)

    def add_conspiration(self, conspiration: str):
        if (conspiration.name == self.name):
            raise ValueError("Cannot be conspiration with himself")
        if (conspiration not in self.conspiration):
            self.conspiration.append(conspiration)

def read_file(file: str) -> list:
    try:
        with open(file, 'r') as f:
            return f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"File {file} not found")

def links(fr: str, p1: str, p2: str):
    friends_list = read_file(fr)
    print(f"Links mode: FR={fr}, P1={p1}, P2={p2}")

def plots(fr: str, cr: str, n: int):
    friends_list = read_file(fr)
    conspiracies_list = read_file(cr)
    print(f"Plots mode: FR={fr}, CR={cr}, n={n}")

def main() -> int:
    # Initialize the parser with custom usage
    parser = argparse.ArgumentParser(
        usage='./game_of_stones [--links FR P1 P2 | --plots FR CR n]',
        description='Game of Stones command line tool'
    )
    # Create a mutually exclusive group
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--links', nargs=3, metavar=('FR', 'P1', 'P2'),
                       help='FR: file containing friendship relations, P1: person one, P2: person two')
    group.add_argument('--plots', nargs=3, metavar=('FR', 'CR', 'n'),
                       help='FR: file with friendship relations, CR: file with conspiracies intentions, n: maximum length of friendship paths')

    args = parser.parse_args()
    # Process arguments based on the used option
    if args.links:
        fr, p1, p2 = args.links
        links(fr, p1, p2)

    if args.plots:
        fr, cr, n = args.plots
        if not n.isdigit() or int(n) <= 0:
            raise ValueError("n must be a positive number")
        plots(fr, cr, int(n))

    return 0

if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(84)
